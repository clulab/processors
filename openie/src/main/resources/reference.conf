filtering {
    stops       = /org/clulab/openie/filtering/stops.txt
    transparent = /org/clulab/openie/filtering/transparent.txt
    stopNER = ["DATE", "DURATION", "MISC", "MONEY", "NUMBER", "ORDINAL", "SET", "TIME"]
}

CustomRuleBasedEntityFinder {

    language = "english"    // options: english, spanish, portuguese

    entityRulesPath = "org/clulab/openie/entities/grammar/entities.yml"
    avoidRulesPath = "org/clulab/openie/entities/grammar/avoid.yml"


    // When extracting the base entity, should only base entities with a noun or verb be kept?
    ensureBaseTagNounVerb = true

    // when deciding if the candidate entity is a valid base entity (i.e., there is some useful content there),
    // the system tries to ensure that there is some content that a noun/verb and is NOT one tagged with one of
    // these NER tags.  They are not filtered out, just they do not count as content when determining if the base
    // entity is valid.
    stopNER = ${filtering.stopNER}

    maxHops = 3             // number of traversals in the syntax dependency graph the system can take to expand the entity
    maxLength = 10          // maximum length the entity can be, in terms of tokens

    // -----------------------------------------------------------
    // Dependencies used to control the expansion of the entities
    // Note: each is used as a regex
    // -----------------------------------------------------------

    invalidOutgoing = [
        "aux",
        "^acl",
        "advcl_to",
        "^advcl_because",
        "appos",
        "^case",
        "^conj",
        "^cop",
        "^cc$",
        "dep",
        "det",
        "^nmod_as",
        "^nmod_because",
        "^nmod_due_to",
        "^nmod_except",
        "^nmod_given",
        "^nmod_since",
        "^nmod_without$",
        "^punct",
        "^ref$",
        "nmod:npmod",
        "nmod:tmod",
        "nmod_according_to",
        "nmod_after",
        "nmod_against",
        "nmod_agent",
        "nmod_ago",
        "nmod_along_with",
        "nmod_alongside",
        "nmod_amid",
        "nmod_amidst",
        "nmod_among",
        "nmod_amongst",
        "nmod_apart_from",
        "nmod_as_for",
        "nmod_as_of",
        "nmod_as_per",
        "nmod_as_to",
        "nmod_away_from",
        "nmod_based",
        "nmod_because_of",
        "nmod_before",
        "nmod_beneath",
        "nmod_besides",
        "nmod_between",
        "nmod_beyond",
        "nmod_compared_to",
        "nmod_compared_with",
        "nmod_concerning",
        "nmod_despite",
        "nmod_due",
        "nmod_due_to",
        "nmod_during",
        "nmod_endorsed",
        "nmod_except",
        "nmod_except_for",
        "nmod_excluding",
        "nmod_following",
        "nmod_given",
        "nmod_higher",
        "nmod_household",
        "nmod_if",
        "nmod_in_accordance_with",
        "nmod_in_addition_to",
        "nmod_in_case_of",
        "nmod_in_order",
        "nmod_in_spite_of",
        "nmod_instead_of",
        "nmod_large",
        "nmod_more_than",
        "nmod_nearer",
        "nmod_notwithstanding",
        "nmod_off",
        "nmod_on_account_of",
        "nmod_on_behalf_of",
        "nmod_out",
        "nmod_out_of",
        "nmod_outcome",
        "nmod_outside_of",
        "nmod_past",
        "nmod_per",
        "nmod_rather_than",
        "nmod_since",
        "nmod_such_as",
        "nmod_than",
        "nmod_throughout",
        "nmod_throught",
        "nmod_together_with",
        "nmod_toward",
        "nmod_towards",
        "nmod_unlike",
        "nmod_unrelated",
        "nmod_until",
        "nmod_up",
        "nmod_v.",
        "nmod_via",
        "nmod_vs.",
        "nmod_with_regard_to",
        "nmod_with_respect_to",
        "nmod_without",
        "nmod_worsen"
      ]

      invalidIncoming = []

      validOutgoing = [
        ".+"
      ]
}